name: Gamersky News and Comments Crawler

on:
  # 定时触发 - 每5分钟执行一次
  schedule:
    # - cron: '*/5 * * * *'  # 每5分钟
    - cron: '*/20 * * * *'  # 每15分钟
    # - cron: '*/30 * * * *'  # 每30分钟
    # - cron: '0 * * * *'     # 每小时
    # - cron: '0 */2 * * *'   # 每2小时
    # - cron: '0 0 */6 * *'   # 每6小时
    
  # 手动触发
  workflow_dispatch:
    inputs:
      news_pages:
        description: '爬取新闻页数'
        required: false
        default: '2'
        type: string
      comment_pages:
        description: '每条新闻爬取的评论页数'
        required: false
        default: '5'
        type: string
      delay:
        description: '请求延迟时间 (如: 1s, 2s, 500ms)'
        required: false
        default: '2s'
        type: string

  # 推送触发（可选）
  # push:
  #   branches: [ main, master ]

env:
  # 设置时区
  TZ: Asia/Shanghai

# 添加权限配置
permissions:
  contents: write  # 允许写入仓库内容
  actions: read   # 允许读取actions

jobs:
  crawl:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: 缓存 Go 模块
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 下载依赖
      run: go mod download
      
    - name: 创建数据目录
      run: mkdir -p data/ci-output
      
    - name: 执行爬取任务
      env:
        CGO_ENABLED: 1
      run: |
        # 根据触发方式设置参数
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # 手动触发，使用输入参数
          NEWS_PAGES="${{ github.event.inputs.news_pages }}"
          COMMENT_PAGES="${{ github.event.inputs.comment_pages }}"
          DELAY="${{ github.event.inputs.delay }}"
        else
          # 定时触发，使用默认参数
          NEWS_PAGES="2"
          COMMENT_PAGES="3"
          DELAY="1s"
        fi

        echo "开始爬取 Gamersky 新闻和评论..."
        echo "新闻页数: $NEWS_PAGES"
        echo "评论页数: $COMMENT_PAGES"
        echo "延迟: $DELAY"
        echo "时间: $(date)"

        # 生成一次性时间戳，写入 GITHUB_ENV 以便后续步骤复用，保证本次 run 使用相同时间
        RUN_TS=$(date +%Y%m%d_%H%M%S)
        echo "RUN_TS=$RUN_TS" >> "$GITHUB_ENV"

        # 执行爬取命令（使用提前获取的时间戳）
        go run main.go gamersky-full \
          --news-pages="$NEWS_PAGES" \
          --comment-pages="$COMMENT_PAGES" \
          --delay="$DELAY" \
          --output="./data/ci-output/gamersky_${RUN_TS}.db"
          
    - name: 检查爬取结果
      run: |
        echo "=== 爬取结果统计 ==="
        if ls data/ci-output/*.db 1> /dev/null 2>&1; then
          for db in data/ci-output/*.db; do
            echo "数据库文件: $db"
            echo "文件大小: $(du -h "$db" | cut -f1)"
            
            # 如果有sqlite3命令，显示记录数
            if command -v sqlite3 &> /dev/null; then
              echo "新闻数量: $(sqlite3 "$db" "SELECT COUNT(*) FROM gamersky_news;" 2>/dev/null || echo "无法查询")"
              echo "评论数量: $(sqlite3 "$db" "SELECT COUNT(*) FROM gamersky_comments;" 2>/dev/null || echo "无法查询")"
              echo "总记录数: $(sqlite3 "$db" "SELECT (SELECT COUNT(*) FROM gamersky_news) + (SELECT COUNT(*) FROM gamersky_comments);" 2>/dev/null || echo "无法查询")"
            fi
            echo "---"
          done
        else
          echo "未找到数据库文件"
        fi
        
    - name: 上传爬取数据
      uses: actions/upload-artifact@v4
      if: always()  # 即使前面步骤失败也要上传
      with:
        name: gamersky-data-${{ github.run_number }}
        path: |
          data/ci-output/*.db
          data/ci-output/*.log
        retention-days: 30  # 保留30天
        
    # - name: 提交数据到仓库 (可选)
    #   if: github.event_name == 'schedule'  # 仅定时任务提交
    #   run: |
    #     # 配置 git
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     
    #     # 检查是否有变化
    #     if [ -n "$(git status --porcelain data/)" ]; then
    #       echo "发现新数据，提交到仓库..."
    #       git add data/
    #       git commit -m "🤖 自动爬取 Gamersky 新闻数据 - $(date '+%Y-%m-%d %H:%M:%S')"
    #       git push
    #     else
    #       echo "没有新数据变化"
    #     fi

  # 可选：发送通知任务
  notify:
    runs-on: ubuntu-latest
    needs: crawl
    if: failure()  # 仅在爬取失败时运行
    
    steps:
    - name: 发送失败通知
      run: |
        echo "Gamersky 爬取任务失败！"
        echo "时间: $(date)"
        echo "运行ID: ${{ github.run_id }}"
        # 这里可以集成企业微信、钉钉、Slack等通知服务
        # curl -X POST "your-webhook-url" -d "{"text":"爬取任务失败"}"
