name: Gamersky News Crawler (Flexible Schedule)

on:
  # 多种定时策略
  # schedule:
  #   # 高频爬取 - 每10分钟 (工作时间)
  #   - cron: '*/10 9-18 * * 1-5'  # 工作日 9:00-18:00，每10分钟
    
  #   # 中频爬取 - 每30分钟 (非工作时间)
  #   - cron: '*/30 0-8,19-23 * * 1-5'  # 工作日其他时间，每30分钟
  #   - cron: '*/30 * * * 0,6'  # 周末，每30分钟
    
  #   # 深度爬取 - 每天凌晨 (爬取更多页面)
  #   - cron: '0 2 * * *'  # 每天凌晨2点，深度爬取
    
  # 手动触发
  workflow_dispatch:
    inputs:
      crawl_mode:
        description: '爬取模式'
        required: true
        default: 'normal'
        type: choice
        options:
        - normal
        - deep
        - test
      pages:
        description: '爬取页数 (normal: 3, deep: 10, test: 1)'
        required: false
        default: 'auto'
        type: string
      delay:
        description: '请求延迟时间'
        required: false
        default: '1s'
        type: string

env:
  TZ: Asia/Shanghai

jobs:
  determine-params:
    runs-on: ubuntu-latest
    outputs:
      pages: ${{ steps.set-params.outputs.pages }}
      delay: ${{ steps.set-params.outputs.delay }}
      mode: ${{ steps.set-params.outputs.mode }}
    
    steps:
    - name: 确定爬取参数
      id: set-params
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # 手动触发
          MODE="${{ github.event.inputs.crawl_mode }}"
          DELAY="${{ github.event.inputs.delay }}"
          
          if [ "${{ github.event.inputs.pages }}" = "auto" ]; then
            case "$MODE" in
              "normal") PAGES="3" ;;
              "deep") PAGES="10" ;;
              "test") PAGES="1" ;;
              *) PAGES="3" ;;
            esac
          else
            PAGES="${{ github.event.inputs.pages }}"
          fi
        else
          # 定时触发，根据时间判断模式
          HOUR=$(date +%H)
          DAY_OF_WEEK=$(date +%u)  # 1-7 (Monday-Sunday)
          
          if [ "$HOUR" = "02" ]; then
            # 凌晨2点 - 深度爬取
            MODE="deep"
            PAGES="10"
            DELAY="2s"
          elif [ "$DAY_OF_WEEK" -ge 1 ] && [ "$DAY_OF_WEEK" -le 5 ] && [ "$HOUR" -ge 9 ] && [ "$HOUR" -le 18 ]; then
            # 工作日工作时间 - 高频爬取
            MODE="normal"
            PAGES="3"
            DELAY="1s"
          else
            # 其他时间 - 普通爬取
            MODE="normal"
            PAGES="2"
            DELAY="1s"
          fi
        fi
        
        echo "pages=$PAGES" >> $GITHUB_OUTPUT
        echo "delay=$DELAY" >> $GITHUB_OUTPUT
        echo "mode=$MODE" >> $GITHUB_OUTPUT
        
        echo "爬取模式: $MODE"
        echo "爬取页数: $PAGES"
        echo "请求延迟: $DELAY"

  crawl:
    runs-on: ubuntu-latest
    needs: determine-params
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: 缓存 Go 模块
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 下载依赖
      run: go mod download
      
    - name: 创建数据目录
      run: mkdir -p data
      
    - name: 执行爬取任务
      env:
        CGO_ENABLED: 1
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        MODE="${{ needs.determine-params.outputs.mode }}"
        PAGES="${{ needs.determine-params.outputs.pages }}"
        DELAY="${{ needs.determine-params.outputs.delay }}"
        
        echo "========================================="
        echo "🚀 开始 Gamersky 新闻爬取任务"
        echo "========================================="
        echo "📅 时间: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "🔧 模式: $MODE"
        echo "📄 页数: $PAGES"
        echo "⏱️  延迟: $DELAY"
        echo "🎯 触发: ${{ github.event_name }}"
        echo "========================================="
        
        # 执行爬取
        OUTPUT_DB="./data/gamersky_${MODE}_${TIMESTAMP}.db"
        
        go run main.go gamersky-once \
          --pages="$PAGES" \
          --delay="$DELAY" \
          --output="$OUTPUT_DB"
          
        echo "✅ 爬取完成，数据保存到: $OUTPUT_DB"
        
    - name: 生成爬取报告
      run: |
        echo "=== 📊 爬取结果报告 ===" > crawl_report.txt
        echo "时间: $(date '+%Y-%m-%d %H:%M:%S')" >> crawl_report.txt
        echo "模式: ${{ needs.determine-params.outputs.mode }}" >> crawl_report.txt
        echo "页数: ${{ needs.determine-params.outputs.pages }}" >> crawl_report.txt
        echo "延迟: ${{ needs.determine-params.outputs.delay }}" >> crawl_report.txt
        echo "触发方式: ${{ github.event_name }}" >> crawl_report.txt
        echo "" >> crawl_report.txt
        
        if ls data/*.db 1> /dev/null 2>&1; then
          echo "📁 生成的数据文件:" >> crawl_report.txt
          for db in data/*.db; do
            echo "  - $(basename "$db"): $(du -h "$db" | cut -f1)" >> crawl_report.txt
          done
        else
          echo "❌ 未找到数据库文件" >> crawl_report.txt
        fi
        
        echo "" >> crawl_report.txt
        echo "🔗 GitHub Actions 运行链接:" >> crawl_report.txt
        echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> crawl_report.txt
        
        # 输出报告内容
        cat crawl_report.txt
        
    - name: 上传数据和报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gamersky-${{ needs.determine-params.outputs.mode }}-${{ github.run_number }}
        path: |
          data/*.db
          crawl_report.txt
        retention-days: 30

  # 清理旧数据 (可选)
  cleanup:
    runs-on: ubuntu-latest
    needs: crawl
    if: github.event_name == 'schedule'  # 仅定时任务执行清理
    
    steps:
    - name: 清理旧的 Artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // 删除7天前的artifacts
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 7);
          
          for (const artifact of artifacts.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < cutoffDate && artifact.name.startsWith('gamersky-')) {
              console.log(`删除旧artifact: ${artifact.name} (${artifact.created_at})`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
          }
